// Copyright 2024 Mor√©bec
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package specter

import "context"

type ProcessingContext struct {
	context.Context
	Specifications SpecificationGroup
	Artifacts      []Artifact
	Logger         Logger
}

// Artifact returns an artifact by its ID.
func (c ProcessingContext) Artifact(id ArtifactID) Artifact {
	for _, o := range c.Artifacts {
		if o.ID() == id {
			return o
		}
	}
	return nil
}

// SpecificationProcessor are services responsible for performing work using Specifications
// and which can possibly generate artifacts.
type SpecificationProcessor interface {
	// Name returns the unique name of this processor.
	// This name can appear in logs to report information about a given processor.
	Name() string

	// Process processes a group of specifications.
	Process(ctx ProcessingContext) ([]Artifact, error)
}

// ArtifactProcessor are services responsible for processing artifacts of SpecProcessors.
type ArtifactProcessor interface {
	// Process performs the processing of artifacts generated by SpecificationProcessor.
	Process(ctx ArtifactProcessingContext) error

	// Name returns the name of this processor.
	Name() string
}

func GetContextArtifact[T Artifact](ctx ProcessingContext, id ArtifactID) T {
	artifact := ctx.Artifact(id)
	v, _ := artifact.(T)
	return v
}
