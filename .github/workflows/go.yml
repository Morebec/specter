# Copyright 2024 Mor√©bec
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  GO_VERSION: 1.22

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Add License
        run: ./scripts/add_license.sh

      - name: Check Format
        run: ./scripts/check_gofmt.sh

      - name: Check for changes
        id: check_changes
        run: |
          if [[ -n $(git status --porcelain) ]]; then
              echo "::set-output name=invalidCommit::true"
          fi

      - name: Lint
        run: ./scripts/golangci_lint.sh

  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build
      run: go build -v ./...

    - name: Test
      run: go test -v ./...

  coverage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          # default fetch-depth is insufficent to find previous coverage notes
          fetch-depth: 10

      - uses: gwatts/go-coverage-action@v2
        id: coverage
        with:
          # Optional coverage threshold
          # use fail-coverage to determine what should happen below this threshold
          coverage-threshold: 80

          # collect coverage for all packages beyond the one under test
          cover-pkg: ./...
