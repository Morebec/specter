package specter

import "context"

type ProcessingContext struct {
	context.Context
	Specifications SpecificationGroup
	Artifacts      []Artifact
	Logger         Logger
}

// Artifact returns the artifact associated with a given processor.
func (c ProcessingContext) Artifact(artifactName string) Artifact {
	for _, o := range c.Artifacts {
		if o.Name == artifactName {
			return o
		}
	}
	return Artifact{Name: artifactName, Value: nil}
}

// Artifact represents a result or output generated by a SpecificationProcessor.
// An artifact is a unit of data or information produced as part of the processing workflow.
// It can be a transient, in-memory object, or it might represent more permanent entities such as
// files on disk, records in a database, deployment units, or other forms of data artifacts.
type Artifact struct {
	// Name is a unique identifier of the artifact, which helps in distinguishing and referencing
	// the artifact within a processing context.
	Name string

	// Value is the actual content or data of the artifact. This can be any type, including but not
	// limited to in-memory structures, file paths, database records, or serialized deployment units.
	Value any
}

// SpecificationProcessor are services responsible for performing work using Specifications
// and which can possibly generate artifacts.
type SpecificationProcessor interface {
	// Name returns the unique FilePath of this processor.
	Name() string

	// Process processes a group of specifications.
	Process(ctx ProcessingContext) ([]Artifact, error)
}

// ArtifactRegistry provides an interface for managing a registry of artifacts. This
// registry tracks artifacts generated during processing runs, enabling clean-up
// in subsequent runs to avoid residual artifacts and maintain a clean slate.
//
// Implementations of the ArtifactRegistry interface must be thread-safe to handle
// concurrent calls to TrackFile and UntrackFile methods. Multiple goroutines may
// access the registry simultaneously, so appropriate synchronization mechanisms
// should be implemented to prevent race conditions and ensure data integrity.
type ArtifactRegistry interface {
	// Load the registry state from persistent storage. If an error occurs, it
	// should be returned to indicate the failure of the loading operation.
	Load() error

	// Save the current state of the registry to persistent storage. If an
	// error occurs, it should be returned to indicate the failure of the saving operation.
	Save() error

	// AddArtifact registers an artifact name under a specific processor name. This method
	// should ensure that the file path is associated with the given processor name
	// in the registry.
	AddArtifact(processorName string, artifactName string)

	// RemoveArtifact removes a given named artifact registration for a specific processor name. This
	// method should ensure that the file path is disassociated from the given
	// processor name in the registry.
	RemoveArtifact(processorName string, artifactName string)

	// Artifacts returns the artifacts for a given processor.
	Artifacts(processorName string) []string
}

type NoopArtifactRegistry struct {
}

func (n NoopArtifactRegistry) Load() error {
	return nil
}

func (n NoopArtifactRegistry) Save() error {
	return nil
}

func (n NoopArtifactRegistry) AddArtifact(processorName string, artifactName string) {}

func (n NoopArtifactRegistry) RemoveArtifact(processorName string, artifactName string) {}

func (n NoopArtifactRegistry) Artifacts(processorName string) []string {
	return nil
}

type ArtifactProcessingContext struct {
	context.Context
	Specifications SpecificationGroup
	Artifacts      []Artifact
	Logger         Logger

	artifactRegistry ArtifactRegistry
	processorName    string
}

func (c *ArtifactProcessingContext) AddToRegistry(artifactName string) {
	c.artifactRegistry.AddArtifact(c.processorName, artifactName)
}

func (c *ArtifactProcessingContext) RemoveFromRegistry(artifactName string) {
	c.artifactRegistry.RemoveArtifact(c.processorName, artifactName)
}

func (c *ArtifactProcessingContext) RegistryArtifacts() []string {
	return c.artifactRegistry.Artifacts(c.processorName)
}

// ArtifactProcessor are services responsible for processing artifacts of SpecProcessors.
type ArtifactProcessor interface {
	// Process performs the processing of artifacts generated by SpecificationProcessor.
	Process(ctx ArtifactProcessingContext) error

	// Name returns the name of this processor.
	Name() string
}

func GetContextArtifact[T any](ctx ProcessingContext, name string) (v T) {
	artifact := ctx.Artifact(name)
	v, _ = artifact.Value.(T)
	return v
}
