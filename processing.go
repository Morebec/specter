package specter

import (
	"fmt"
	"github.com/morebec/errors-go/errors"
	"os"
	"sync"
)

type ProcessingContext struct {
	DependencyGraph ResolvedDependencies
	Outputs         []ProcessingOutput
}

// Output returns the output associated with a given processor.
func (c ProcessingContext) Output(outputName string) ProcessingOutput {
	for _, o := range c.Outputs {
		if o.Name == outputName {
			return o
		}
	}
	return ProcessingOutput{Name: outputName, Value: nil}
}

// ProcessingOutput represents an output generated by a SpecProcessor.
type ProcessingOutput struct {
	// Name of the Output
	Name string

	// Value of the output
	Value any
}

// SpecProcessor are services responsible for performing work using Specs.
type SpecProcessor interface {
	// Name returns the unique filename of this processor.
	Name() string

	// Process processes a group of specifications.
	Process(ctx ProcessingContext) ([]ProcessingOutput, error)
}

type WriteFilesProcessorConfig struct {
	// Indicates if a registry file should be used to clean up generated files when running the WriteFilesProcessor.
	UseRegistry bool
}

// WriteFilesProcessor is a processor responsible for writing ProcessingOutput referring to files.
// To perform its work this processor looks at the processing context for any FileOutput.
type WriteFilesProcessor struct {
	config WriteFilesProcessorConfig
}

func NewWriteFilesProcessor(conf WriteFilesProcessorConfig) *WriteFilesProcessor {
	return &WriteFilesProcessor{
		config: conf,
	}
}

func (f WriteFilesProcessor) Name() string {
	return "file_output"
}

// FileOutput is a data structure that can be used by a SpecProcessor to output files that can be written by tje WriteFilesProcessor.
type FileOutput struct {
	Path string
	Data []byte
	Mode os.FileMode
}

func (f WriteFilesProcessor) Process(ctx ProcessingContext) ([]ProcessingOutput, error) {
	fmt.Println("Writing output files ...")

	var files []FileOutput
	for _, o := range ctx.Outputs {
		fo, ok := o.Value.(FileOutput)
		if !ok {
			continue
		}
		files = append(files, fo)
	}

	registry := NewOutputFileRegistry(".specter.json")

	failed := false
	var wg sync.WaitGroup
	for _, file := range files {
		wg.Add(1)
		file := file
		go func() {
			defer wg.Done()
			fmt.Println(fmt.Sprintf("Writing file %s ...", file.Path))
			err := os.WriteFile(file.Path, file.Data, os.ModePerm)
			if err != nil {
				failed = true
				fmt.Println(fmt.Sprintf("failed writing output file at %s", file.Path))
			}
			registry.Files = append(registry.Files, file.Path)
		}()
	}
	wg.Wait()

	if f.config.UseRegistry {
		fmt.Println("Writing output file registry ...")
		if err := registry.Write(); err != nil {
			return nil, errors.Wrap(err, "failed writing output files")
		}
		fmt.Println("Output file registry written successfully.")

		if failed {
			return nil, errors.New("failed writing output files")
		}
	}

	fmt.Println("Output files written successfully.")

	return nil, nil
}
